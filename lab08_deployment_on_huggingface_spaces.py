# -*- coding: utf-8 -*-
"""Lab08_Deployment_on_HuggingFace_Spaces.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eRvNlByCIH8A4iFYnzI-WMjopzYGg3cN

### Statistical Learning for Data Science 2 (229352)
#### Instructor: Donlapark Ponnoprat

#### [Course website](https://donlapark.pages.dev/229352/)

## Lab #8

We will train an XGBoost regressor on the monitor dataset dataset and deploy it Github website.
"""

import pandas as pd
import sklearn
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder

import xgboost
from xgboost import XGBRegressor

import joblib

"""We will need `Scikit-learn`'s version number for setting up HuggingFace's space."""

print("Scikit-learn's version:", sklearn.__version__)
print("xgboost's version:", xgboost.__version__)

"""First, download the data of monitor prices collected from Amazon [source](https://www.kaggle.com/datasets/durjoychandrapaul/amazon-products-sales-monitor-dataset)."""

!wget http://www.donlapark.cmustat.com/229352/monitors.csv

data = pd.read_csv('monitors.csv')

data.head()

y_train = data["Price"]
X_train = data.drop(["Title", "Price"], axis=1)

# Names of numerical features
num_col = X_train.select_dtypes(include=['int64', 'float64']).columns
# Names of categorical features
cat_col = X_train.select_dtypes(include=['object', 'bool']).columns

print(num_col)
print(cat_col)

preprocessor = ColumnTransformer([("scaler", StandardScaler(), num_col),
                                  ("onehot", OneHotEncoder(sparse=False), cat_col)])

model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('regressor', XGBRegressor())])

model.fit(X_train, y_train)

"""Save the model using `joblib`."""

joblib.dump(model, 'model.joblib')

"""Save the list of brands---we will need it to create a dropdown menu."""

unique_values = {col:X_train[col].unique() for col in cat_col}
joblib.dump(unique_values, 'unique_values.joblib')

unique_values

"""### Exercise:
1. Choose your own dataset from https://www.kaggle.com/datasets?topic=trendingDataset or any other website. Choose your own prediction task.

2. Fit and deploy your prediction model on a Github website.

3. Go to Assignment in Mango and send in the link to you website.

"""

import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from xgboost import XGBRegressor
import joblib

# โหลดข้อมูลจากไฟล์ CSV
data = pd.read_csv('/content/supermarket_sales - Sheet1.csv')

# ดูข้อมูลเบื้องต้น
print(data.head())
print(data.info())

# กำหนดตัวแปรเป้าหมาย
y_train = data['Total']

# ลบตัวแปรเป้าหมายและคอลัมน์ที่ไม่จำเป็นออก
X_train = data.drop(['Total', 'Invoice ID', 'Date', 'Time'], axis=1)

# ชื่อของคอลัมน์ที่เป็นตัวเลข
num_col = X_train.select_dtypes(include=['int64', 'float64']).columns

# ชื่อของคอลัมน์ที่เป็นตัวแปรเชิงหมวดหมู่
cat_col = X_train.select_dtypes(include=['object', 'bool']).columns

print(num_col)
print(cat_col)

# สร้างตัวประมวลผลข้อมูล
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), num_col),
        ('cat', OneHotEncoder(), cat_col)
    ])

# สร้างโมเดล Pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', XGBRegressor())
])

# ฝึกโมเดล
model.fit(X_train, y_train)

# บันทึกโมเดลที่ฝึกเสร็จแล้ว
joblib.dump(model, 'model.joblib')

# บันทึกรายการของค่าเฉพาะ
unique_values = {col: X_train[col].unique() for col in cat_col}
joblib.dump(unique_values, 'unique_values.joblib')

pip install streamlit

import streamlit as st
import joblib
import pandas as pd

# โหลดโมเดลที่ฝึกไว้
model = joblib.load('model.joblib')

# สร้างฟังก์ชันเพื่อทำนาย
def predict(data):
    return model.predict(data)

# ส่วนของ Streamlit
st.title('Supermarket Sales Prediction')

# รับข้อมูลจากผู้ใช้
Gender = st.selectbox('Gender', ['Male', 'Female'])
Age = st.number_input('Age', min_value=0, max_value=100, value=30)
Product_line = st.selectbox('Product Line', ['Health and beauty', 'Electronic accessories', 'Home and lifestyle'])

# ปุ่มทำนาย
if st.button('Predict'):
    # เตรียมข้อมูลที่กรอก
    input_data = pd.DataFrame({'Gender': [Gender], 'Age': [Age], 'Product_line': [Product_line]})

    # ทำนาย
    prediction = predict(input_data)

    # แสดงผลลัพธ์
    st.write(f'The predicted sales total is: {prediction[0]:.2f}')