# -*- coding: utf-8 -*-
"""model.joblib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_n2E74I5A-dhcVuAJ4IFToTsYrf30S79
"""

import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from xgboost import XGBRegressor
import joblib

# โหลดข้อมูลจากไฟล์ CSV
data = pd.read_csv('/content/supermarket_sales - Sheet1.csv')

# ดูข้อมูลเบื้องต้น
print(data.head())
print(data.info())
# กำหนดตัวแปรเป้าหมาย
y_train = data['Total']

# ลบตัวแปรเป้าหมายและคอลัมน์ที่ไม่จำเป็นออก
X_train = data.drop(['Total', 'Invoice ID', 'Date', 'Time'], axis=1)
# ชื่อของคอลัมน์ที่เป็นตัวเลข
num_col = X_train.select_dtypes(include=['int64', 'float64']).columns

# ชื่อของคอลัมน์ที่เป็นตัวแปรเชิงหมวดหมู่
cat_col = X_train.select_dtypes(include=['object', 'bool']).columns

print(num_col)
print(cat_col)
# สร้างตัวประมวลผลข้อมูล
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), num_col),
        ('cat', OneHotEncoder(), cat_col)
    ])

# สร้างโมเดล Pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', XGBRegressor())
])

# ฝึกโมเดล
model.fit(X_train, y_train)
# บันทึกโมเดลที่ฝึกเสร็จแล้ว
joblib.dump(model, 'model.joblib')

# บันทึกรายการของค่าเฉพาะ
unique_values = {col: X_train[col].unique() for col in cat_col}
joblib.dump(unique_values, 'unique_values.joblib')

import streamlit as st
import joblib
import pandas as pd

# โหลดโมเดลที่ฝึกไว้
model = joblib.load('model.joblib')

# ฟังก์ชันในการโหลดข้อมูลและการเตรียมข้อมูล
def load_data():
    # โหลดข้อมูลจากไฟล์ CSV ที่อัปโหลดมา
    data = pd.read_csv('supermarket_sales - Sheet1.csv')
    return data

def predict(data):
    # เตรียมข้อมูลให้พร้อมสำหรับการทำนาย
    return model.predict(data)

# ส่วนของ Streamlit
st.title('Supermarket Sales Prediction')

# โหลดข้อมูลและแสดงข้อมูลตัวอย่าง
data = load_data()

# แสดงข้อมูลตัวอย่างเพื่อการตรวจสอบ
st.write("Data Sample:")
st.write(data.head())

# รับข้อมูลจากผู้ใช้
Gender = st.selectbox('Gender', data['Gender'].unique())
Customer_Type = st.selectbox('Customer Type', data['Customer type'].unique())
Product_line = st.selectbox('Product Line', data['Product line'].unique())
Unit_price = st.number_input('Unit Price', min_value=float(data['Unit price'].min()), max_value=float(data['Unit price'].max()), value=float(data['Unit price'].mean()))
Quantity = st.number_input('Quantity', min_value=int(data['Quantity'].min()), max_value=int(data['Quantity'].max()), value=int(data['Quantity'].mean()))

# ปุ่มทำนาย
if st.button('Predict'):
    # เตรียมข้อมูลที่กรอก
    input_data = pd.DataFrame({
        'Gender': [Gender],
        'Customer type': [Customer_Type],
        'Product line': [Product_line],
        'Unit price': [Unit_price],
        'Quantity': [Quantity]
    })

    # ใช้ข้อมูลเดียวกันนี้เพื่อแปลงให้เหมือนกับข้อมูลที่โมเดลถูกฝึกไว้
    prediction = predict(input_data)

    # แสดงผลลัพธ์
    st.write(f'The predicted sales total is: {prediction[0]:.2f}')